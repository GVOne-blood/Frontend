/**
 * TYPESCRIPT C∆† B·∫¢N - PH·∫¶N 2.5: NULL V√Ä UNDEFINED
 * ===============================================
 * 
 * üéØ KH√ÅI NI·ªÜM
 * -----------
 * - Null: ƒê·∫°i di·ªán cho "kh√¥ng c√≥ g√¨" ho·∫∑c "r·ªóng".
 * - Undefined: ƒê·∫°i di·ªán cho gi√° tr·ªã ch∆∞a ƒë∆∞·ª£c g√°n.
 * 
 * üí° L·ª¢I √çCH
 * ---------
 * Null: Bi·ªÉu th·ªã m·ªôt ƒë·ªëi t∆∞·ª£ng kh√¥ng t·ªìn t·∫°i.
 * Undefined: Bi·∫øn ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o.
 */

/**
 * 1. NULL
 * ------
 * - ƒê·∫°i di·ªán cho gi√° tr·ªã r·ªóng.
 * - ƒê∆∞·ª£c d√πng ƒë·ªÉ g√°n gi√° tr·ªã "kh√¥ng c√≥ g√¨".
 */

/**
 * 2. UNDEFINED
 * ------------
 * - ƒê·∫°i di·ªán cho ch∆∞a c√≥ gi√° tr·ªã.
 * - Xu·∫•t hi·ªán khi bi·∫øn ch∆∞a kh·ªüi t·∫°o ho·∫∑c truy c·∫≠p thu·ªôc t√≠nh kh√¥ng t·ªìn t·∫°i.
 */

/**
 * 3. PH√ÇN BI·ªÜT NULL V√Ä UNDEFINED
 * ------------------------------
 * - Null: C·ªë √Ω r·ªóng
 * - Undefined: Thi·∫øu gi√° tr·ªã
 */

/**
 * 4. NON-NULL ASSERTION OPERATOR (!)
 * ---------------------------------
 * - Kh·∫≥ng ƒë·ªãnh ch·∫Øc ch·∫Øn kh√¥ng null/undefined
 * - C·∫©n th·∫≠n khi s·ª≠ d·ª•ng ƒë·ªÉ kh√¥ng l·ªói runtime
 */

/**
 * 5. OPTIONAL CHAINING (?.)
 * -------------------------
 * - Truy c·∫≠p an to√†n c√°c thu·ªôc t√≠nh kh√¥ng ch·∫Øc ch·∫Øn
 */

/**
 * ‚ö†Ô∏è L∆ØU √ù QUAN TR·ªåNG
 * ------------------
 * 1. Kh√°c bi·ªát l·ªõn trong == vs ===
 * 2. B·∫≠t `strictNullChecks` trong `tsconfig.json`
 * 3. Tr√°nh l·∫°m d·ª•ng Non-Null Assertion ƒë·ªÉ kh√¥ng l·ªói runtime.
 */

/**
 * üèãÔ∏è B√ÄI T·∫¨P TH·ª∞C H√ÄNH
 * ===================
 * 
 * B√ÄI 1: User Profile Management
 * ------------------------------
 * Vi·∫øt h√†m getUserProfile(userId: number): {name: string, email?: string, age?: number} | null
 * - Return mock user profile v·ªõi c√°c tr∆∞·ªùng: name, email, age
 * - Random email v√† age c√≥ th·ªÉ null
 */

// TODO: Vi·∫øt code c·ªßa b·∫°n ·ªü ƒë√¢y cho B√†i 1
function getUserProfile(userId: number): {name: string, email?: string, age?: number} | null {
    return {name: "Tuan Do", email: Math.random() + "@gmail.com", age: Math.random()}
}




/**
 * B√ÄI 2: Safe Property Access
 * ----------------------------
 * Vi·∫øt h√†m printUserContact(user: {name: string, contact?: {phone?: string, email?: string}})
 * - S·ª≠ d·ª•ng optional chaining ƒë·ªÉ in ra phone v√† email n·∫øu c√≥
 */

// TODO: Vi·∫øt code c·ªßa b·∫°n ·ªü ƒë√¢y cho B√†i 2
function printUserContact(user: {name: string, contact?: {phone?: string, email?: string}}) {
    console.log('Name: ', user.name)
    console.log('Phone: ', user.contact?.phone?? 'No phone provided')
    console.log('Email: ', user.contact?.email?? 'No email provided')
}

printUserContact({name: "Tuan Do", contact: {phone: "1234567890"}})

/**
 * B√ÄI 3: Null vs Undefined Comparison
 * -----------------------------------
 * Vi·∫øt h√†m compare(a: any, b: any): {loose: boolean, strict: boolean}
 * - Return object ch·ª©a `loose` v√† `strict` 
 * - `loose` d√πng `==`, `strict` d√πng `===`
 */

// TODO: Vi·∫øt code c·ªßa b·∫°n ·ªü ƒë√¢y cho B√†i 3
function compare(a: any, b: any): {loose: boolean, strict: boolean} {
    return {
        loose: a == b,
        strict: a=== b
    }
}
compare(null, undefined) // { loose: true, strict: false }