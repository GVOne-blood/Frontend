/**
 * TYPESCRIPT C∆† B·∫¢N - PH·∫¶N 2.3: ENUMS
 * ===================================
 * 
 * üéØ KH√ÅI NI·ªÜM
 * -----------
 * Enum (Enumeration) l√† c√°ch ƒë·ªãnh nghƒ©a t·∫≠p h·ª£p c√°c h·∫±ng s·ªë c√≥ t√™n
 * Gi·ªëng nh∆∞ "menu c·ªë ƒë·ªãnh" - ch·ªâ c√≥ th·ªÉ ch·ªçn t·ª´ c√°c options c√≥ s·∫µn
 * 
 * üí° L·ª¢I √çCH
 * ---------
 * 1. Code d·ªÖ ƒë·ªçc: Status.ACTIVE r√µ r√†ng h∆°n s·ªë 1
 * 2. Tr√°nh magic numbers/strings
 * 3. Type safety v√† auto-complete
 * 4. Refactoring d·ªÖ d√†ng
 */

/**
 * 1. NUMERIC ENUMS
 * ----------------
 * - M·∫∑c ƒë·ªãnh b·∫Øt ƒë·∫ßu t·ª´ 0
 * - T·ª± ƒë·ªông tƒÉng: PENDING=0, PROCESSING=1, COMPLETED=2
 * - C√≥ th·ªÉ custom values
 * - C√≥ reverse mapping
 */

/**
 * 2. STRING ENUMS
 * ---------------
 * - Ph·∫£i g√°n value cho m·ªçi member
 * - Readable khi debug
 * - KH√îNG c√≥ reverse mapping
 * - Ph·ªï bi·∫øn cho status, types, actions
 */

/**
 * 3. CONST ENUMS
 * --------------
 * - Compile-time optimization
 * - Values ƒë∆∞·ª£c inline khi compile
 * - Gi·∫£m code size
 */

/**
 * ‚ö†Ô∏è L∆ØU √ù QUAN TR·ªåNG
 * ------------------
 * 1. String enums kh√¥ng c√≥ reverse mapping
 * 2. Numeric enums t·ª± ƒë·ªông tƒÉng t·ª´ gi√° tr·ªã tr∆∞·ªõc
 * 3. Const enums bi·∫øn m·∫•t sau compile
 * 4. C·∫©n th·∫≠n khi iterate numeric enums
 */

/**
 * üèãÔ∏è B√ÄI T·∫¨P TH·ª∞C H√ÄNH
 * ===================
 * 
 * B√ÄI 1: Order Management System
 * ------------------------------
 * T·∫°o c√°c enums v√† functions sau:
 * 
 * a) OrderStatus enum v·ªõi c√°c gi√° tr·ªã:
 *    - PENDING
 *    - CONFIRMED
 *    - SHIPPED
 *    - DELIVERED
 *    - CANCELLED
 * 
 * b) PaymentMethod enum (string enum):
 *    - CASH = "CASH"
 *    - CREDIT_CARD = "CREDIT_CARD"
 *    - BANK_TRANSFER = "BANK_TRANSFER"
 * 
 * c) function canCancelOrder(status: OrderStatus): boolean
 *    - Input: order status
 *    - Output: true n·∫øu c√≥ th·ªÉ cancel (ch·ªâ PENDING v√† CONFIRMED)
 *    - V√≠ d·ª•: canCancelOrder(OrderStatus.PENDING) => true
 * 
 * d) function getPaymentFee(method: PaymentMethod, amount: number): number
 *    - CASH: kh√¥ng ph√≠
 *    - CREDIT_CARD: 2.5% c·ªßa amount
 *    - BANK_TRANSFER: ph√≠ c·ªë ƒë·ªãnh 5000
 *    - V√≠ d·ª•: getPaymentFee(PaymentMethod.CREDIT_CARD, 100000) => 2500
 */

// TODO: Vi·∫øt code c·ªßa b·∫°n ·ªü ƒë√¢y cho B√†i 1
enum OrderStatus {
    PENDING, CONFIRMED, SHIPPED, DELIVERED, CANCELLED
}
enum PaymentMethod {
    CASH = "CASH", CREDIT_CARD = "CREDIT_CARD", BANK_TRANSFER = "BANK_TRANSFER"
}
function canCancelOrder(status: OrderStatus): boolean {
    return status === OrderStatus.PENDING || status === OrderStatus.CONFIRMED
}
function getPaymentFee(method: PaymentMethod, amount: number): number {
    if (method === PaymentMethod.CASH) return amount;
    if (method === PaymentMethod.CREDIT_CARD) return 0.025 * amount
    return 5000
}


/**
 * B√ÄI 2: Game Direction Control
 * -----------------------------
 * 
 * a) T·∫°o Direction enum v·ªõi UP=0, RIGHT=1, DOWN=2, LEFT=3
 * 
 * b) function rotateRight(current: Direction): Direction
 *    - Xoay ph·∫£i 90 ƒë·ªô
 *    - UP -> RIGHT -> DOWN -> LEFT -> UP
 *    - V√≠ d·ª•: rotateRight(Direction.UP) => Direction.RIGHT
 * 
 * c) function getOpposite(direction: Direction): Direction
 *    - Tr·∫£ v·ªÅ h∆∞·ªõng ng∆∞·ª£c l·∫°i
 *    - UP <-> DOWN, LEFT <-> RIGHT
 *    - V√≠ d·ª•: getOpposite(Direction.UP) => Direction.DOWN
 * 
 * d) function move(x: number, y: number, direction: Direction, steps: number): [number, number]
 *    - Di chuy·ªÉn t·ª´ v·ªã tr√≠ (x,y) theo h∆∞·ªõng direction v·ªõi s·ªë b∆∞·ªõc steps
 *    - UP: y gi·∫£m, DOWN: y tƒÉng, LEFT: x gi·∫£m, RIGHT: x tƒÉng
 *    - V√≠ d·ª•: move(0, 0, Direction.RIGHT, 3) => [3, 0]
 */

// TODO: Vi·∫øt code c·ªßa b·∫°n ·ªü ƒë√¢y cho B√†i 2
enum Direction {
    UP = 0, RIGHT = 1, DOWN = 2, LEFT = 3
}
function rotateRight(current: Direction): Direction {
    if (current === Direction.UP) return Direction.DOWN
    if (current === Direction.RIGHT) return Direction.LEFT
    if (current === Direction.DOWN) return Direction.UP
    return Direction.RIGHT
}
function getOpposite(direction: Direction): Direction {
    if (direction === Direction.UP) return Direction.DOWN;
    if (direction === Direction.DOWN) return Direction.UP;
    if (direction === Direction.LEFT) return Direction.RIGHT;
    return Direction.LEFT;
}
function move(x: number, y: number, direction: Direction, steps: number): [number, number] {
    if (direction === Direction.UP) return [x, y + 3]

    if (direction === Direction.DOWN) return [x, y - 3]
    if (direction === Direction.LEFT) return [x - 3, y]
    return [x + 3, y]
}


/**
 * B√ÄI 3: User Permission System
 * -----------------------------
 * S·ª≠ d·ª•ng bitwise flags cho multiple permissions
 * 
 * a) T·∫°o Permission enum:
 *    - NONE = 0
 *    - READ = 1
 *    - WRITE = 2
 *    - DELETE = 4
 *    - ADMIN = READ | WRITE | DELETE (t·∫•t c·∫£ quy·ªÅn)
 * 
 * b) function hasPermission(userPerms: number, required: Permission): boolean
 *    - Check user c√≥ permission c·∫ßn thi·∫øt kh√¥ng
 *    - D√πng bitwise AND (&)
 *    - V√≠ d·ª•: hasPermission(3, Permission.READ) => true (3 = READ + WRITE)
 * 
 * c) function grantPermission(current: number, permission: Permission): number
 *    - Th√™m permission m·ªõi v√†o current permissions
 *    - D√πng bitwise OR (|)
 *    - V√≠ d·ª•: grantPermission(1, Permission.WRITE) => 3
 * 
 * d) function revokePermission(current: number, permission: Permission): number
 *    - X√≥a permission kh·ªèi current permissions
 *    - D√πng bitwise AND v·ªõi NOT (~)
 *    - V√≠ d·ª•: revokePermission(3, Permission.WRITE) => 1
 */

// TODO: Vi·∫øt code c·ªßa b·∫°n ·ªü ƒë√¢y cho B√†i 3

enum Permission {
    NONE = 0, READ = 1, WRITE = 2, DELETE = 3, ADMIN = READ | WRITE | DELETE
}
function hasPermission(UserPerms: number, required: Permission): boolean {
    return (UserPerms & required) === required;
}
function grantPermission(current: number, permission: Permission): number {
    return current | permission;
}
function revokePermission(current: number, permission: Permission): number {
    return current & ~permission;
}