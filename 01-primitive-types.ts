/**
 * TYPESCRIPT C∆† B·∫¢N - PH·∫¶N 2: PRIMITIVE TYPES
 * ==========================================
 * 
 * üéØ KH√ÅI NI·ªÜM
 * -----------
 * Primitive types (ki·ªÉu nguy√™n th·ªßy) l√† nh·ªØng ki·ªÉu d·ªØ li·ªáu c∆° b·∫£n nh·∫•t trong TypeScript:
 * - string: ƒê·∫°i di·ªán cho d·ªØ li·ªáu vƒÉn b·∫£n
 * - number: ƒê·∫°i di·ªán cho s·ªë (c·∫£ s·ªë nguy√™n v√† s·ªë th·ª±c)
 * - boolean: ƒê·∫°i di·ªán cho gi√° tr·ªã ƒë√∫ng/sai (true/false)
 * 
 * üí° L·ª¢I √çCH
 * ---------
 * 1. Type Safety: TypeScript ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu t·∫°i compile time
 * 2. IntelliSense: IDE c√≥ th·ªÉ g·ª£i √Ω methods v√† properties ph√π h·ª£p
 * 3. Code Documentation: Code t·ª± document th√¥ng qua type annotations
 * 4. Refactoring d·ªÖ d√†ng: Thay ƒë·ªïi code an to√†n h∆°n
 */

/**
 * 1. STRING TYPE
 * -------------
 * - Khai b√°o explicit: let name: string = "John"
 * - Type inference: let message = "Hello" (t·ª± hi·ªÉu l√† string)
 * - Template literals: `Hello ${name}`
 * - String methods: toUpperCase(), toLowerCase(), length, etc.
 * - V√≠ d·ª• th·ª±c t·∫ø: Email validation, text processing
 */

/**
 * 2. NUMBER TYPE
 * -------------
 * - Khai b√°o: let age: number = 25
 * - H·ªó tr·ª£: decimal (100), binary (0b1010), octal (0o744), hex (0xf00d)
 * - Type inference: let count = 100 (t·ª± hi·ªÉu l√† number)
 * - Number methods: toFixed(), toPrecision(), Math functions
 * - L∆∞u √Ω: toFixed() tr·∫£ v·ªÅ string, kh√¥ng ph·∫£i number
 * - V√≠ d·ª• th·ª±c t·∫ø: Price calculation, statistics
 */

/**
 * 3. BOOLEAN TYPE
 * --------------
 * - Khai b√°o: let isActive: boolean = true/false
 * - Type inference: let isReady = true (t·ª± hi·ªÉu l√† boolean)
 * - S·ª≠ d·ª•ng trong conditions v√† logic
 * - V√≠ d·ª• th·ª±c t·∫ø: User permissions, feature flags
 */

/**
 * 4. K·∫æT H·ª¢P PRIMITIVE TYPES
 * ------------------------
 * - Interfaces v√† objects v·ªõi multiple primitive types
 * - Functions v·ªõi parameters v√† return types
 * - V√≠ d·ª•: Shopping cart, user profile, form validation
 */

/**
 * ‚ö†Ô∏è L∆ØU √ù QUAN TR·ªåNG
 * ------------------
 * 
 * 1. Lowercase vs Uppercase:
 *    - D√πng string, number, boolean (lowercase) - ƒë√¢y l√† primitive types
 *    - KH√îNG d√πng String, Number, Boolean (uppercase) - ƒë√¢y l√† object types
 * 
 * 2. Type Inference: TypeScript th∆∞·ªùng t·ª± suy lu·∫≠n type
 * 
 * 3. Immutability v·ªõi const: D√πng const khi gi√° tr·ªã kh√¥ng thay ƒë·ªïi
 */

// ‚úÖ ƒê√∫ng
let name1: string = "John";

// ‚ùå Sai - kh√¥ng n√™n d√πng
// let name2: String = "John";

// Const v·ªõi primitive types
const PI: number = 3.14159;
const APP_NAME: string = "My TypeScript App";
const IS_PRODUCTION: boolean = true;

/**
 * üèãÔ∏è B√ÄI T·∫¨P TH·ª∞C H√ÄNH
 * ===================
 * 
 * B√ÄI 1: User Profile Validator
 * ------------------------------
 * T·∫°o m·ªôt function ƒë·ªÉ validate th√¥ng tin user profile v·ªõi c√°c y√™u c·∫ßu:
 * - Username: string, ƒë·ªô d√†i 3-20 k√Ω t·ª±
 * - Age: number, t·ª´ 18-100
 * - Email: string, format email h·ª£p l·ªá
 * - IsActive: boolean
 */

// TODO: Vi·∫øt code c·ªßa b·∫°n ·ªü ƒë√¢y cho B√†i 1

function validateUser(Username:string, Age: number, Email: string, IsActive:boolean){
    if (Username.length < 3 && Username.length > 20) {
        console.log("Username must be between 3 and 20 characters.");
        return false;
    }
    if (Age < 18 && Age > 100){
        console.log("Age must be between 18 and 100.");
        return false;
    }
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(Email)) {
        console.log("Email format is invalid.");
        return false;
    }
    if (IsActive !== true) {
        console.log("IsActive must be true or false.");
        return false;
    }
}


/**
 * B√ÄI 2: Price Calculator
 * -----------------------
 * Vi·∫øt m·ªôt class PriceCalculator c√≥ c√°c methods:
 * - addItem(name: string, price: number, quantity: number): void
 * - removeItem(name: string): boolean
 * - getTotal(): number
 * - applyDiscount(percentage: number): number
 */

// TODO: Vi·∫øt code c·ªßa b·∫°n ·ªü ƒë√¢y cho B√†i 2

class PriceCalculator{
    name: string
    price: number
    quantity: number;

    constructor(name: string, price: number, quantity: number){
        this.name = name;
        this.price = price;
        this.quantity = quantity;
    }
    addItem(name: string, price: number, quantity: number): void {
        this.name = name;
        this.price = price;
        this.quantity = quantity;
    }
    removeItem(name: string): boolean {
        if (this.name === name) {
            this.name = '';
            this.price = 0;
            this.quantity = 0;
            return true;
        }
        return false;
    }
    getTotal(): number {
        return this.price * this.quantity;
    }
}



/**
 * B√ÄI 3: String Utilities
 * -----------------------
 * T·∫°o c√°c utility functions:
 * - capitalize(str: string): string - Vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu
 * - countWords(str: string): number - ƒê·∫øm s·ªë t·ª´
 * - truncate(str: string, maxLength: number): string - C·∫Øt chu·ªói v√† th√™m "..."
 */

// TODO: Vi·∫øt code c·ªßa b·∫°n ·ªü ƒë√¢y cho B√†i 3

function capitalize(str: string): string {
    return str.charAt(0).toUpperCase() + str.slice(1);
}
function countWords(str: string): number {
    return str.trim().split(' ').length;
}
function truncate(str: string, maxLenght: number): string {
    if (str.length > maxLenght) {
        return str.slice(0, maxLenght) + '...';
    }
    return str;
}